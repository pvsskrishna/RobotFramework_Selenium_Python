Robot Framework Command Line Scenarios:
|---------------------------------------------------------------------------------------------------------|
| Command Line Scenario                       | Command                                                   |
|---------------------------------------------|-----------------------------------------------------------|
| Execute all tests in the folder             | robot .                                                   |
| Execute a specific test file                | robot <testfilename>.robot                                |
| Execute test cases by test name             | robot -t "<testname>" .                                   |
| Execute test cases by tag                   | robot --include <tagname> .                               |
| Execute test cases by multiple tags (AND)   | robot --include tag1ANDtag2 .                             |
| Execute test cases by multiple tags (OR)    | robot --include tag1ORtag2 .                              |
| Exclude tests by tag                        | robot --exclude <tagname> .                               |
| Execute tests by suite name                 | robot --suite <suitename>                                 |
| Re-run only failed tests                    | robot --rerunfailed output.xml .                          |
----------------------------------------------------------------------------------------------------------|

Example:
|--------------------------------------------------------------------------------------------------------------------|
| Command Line Scenario                       | Example Command                                                      |
|---------------------------------------------|----------------------------------------------------------------------|
| Execute all tests in the folder             | robot .                                                              |
| Execute a specific test file                | robot loginTests.robot                                               |
| Execute test cases by test name             | robot -t "Valid Login Test" .                                        |
| Execute test cases by tag                   | robot --include smoke .                                              |
| Execute test cases by multiple tags (AND)   | robot --include smokeANDregression .                                 |
| Execute test cases by multiple tags (OR)    | robot --include smokeORsanity .                                      |
| Exclude tests by tag                        | robot --exclude skip .                                               |
| Execute tests by suite name                 | robot --suite loginSuite                                             |
| Re-run only failed tests                    | robot --rerunfailed output.xml .                                     |
---------------------------------------------------------------------------------------------------------------------|

Tricks:
  1. Execute test cases by test name   --->  robot -t "<testname>" .

    In this command line . (dot) referred to search the <testname> in all test files
    if you want to execute that <testname> in any specific test file we can give that test file name

    Ex: robot -t "Valid Login Test" testDemo2.robot

  2. Execute test cases by test name   --->  robot -t "<testname>" .

    In this command line - we can make use regular expression for the <testname>
    instead of giving full name we can give partial name by keeping *
    It will execute all the tests which are starting with testname starting with "Valid" from all test files.

    Ex: robot -t "Valid*" testDemo2.robot .

  3. Execute test cases by tag    ---> robot --include <tagname> .

    we can attach tags to the test cases just like how we are configuring the arguments.
    Ex:
        Validate UnSuccessful Login
            [Tags]      SMOKE                                                   ---> Just like this
            Fill the login form    ${valid_user_name}    ${invalid_password}
            wait until element is loaded    ${Error_Message_Login}
            verify the error message is correct

        So next time we can run the tests based on the tags
            robot --include SMOKE .

  NOTE: Both OR and AND should be capital in commands.

  4. We can add multiple tags for the test cases by just give tab space and add one more tag
    ex: End to End Ecommerce Product Validation
            [Tags]    Regression    SMOKE

            ✅ Tags are case-insensitive: regression, Regression, and REGRESSION are all the same.
            ❌ --include RegressionORSMOKE won't match Regression or SMOKE unless a tag is literally RegressionORSMOKE.
            ✅ Use --include "Regression OR SMOKE" to run tests with either tag.

  5. robot --rerunfailed output.xml .
        Basically this command is used to re-run all the failed testcases.

        🔁 Robot Framework: Rerun Failed Tests

        Command:
        robot --rerunfailed output.xml .

        📌 Description:
        This command reruns only the failed test cases from a previous Robot Framework test execution.

        🧩 Breakdown:
         robot: Runs Robot Framework.
         --rerunfailed output.xml: Tells Robot to rerun only the tests that failed in the given output.xml file.
         . : Refers to the current directory (where your test cases are located).

        ✅ Use Case:
        Useful when you want to save time by rerunning only the failed test cases instead of the full suite.

        🔄 Optional (Merging Results):
        After rerun, merge the original and rerun results into a final report using:
        rebot --merge output.xml rerun.xml

        ⚠️ Note:
        Make sure output.xml exists and is generated from a previous Robot run.

Q. How to set variable values from runtime command-line arguments in Robot Framework❓

    ✅ Use Case:
        You may want to dynamically decide which browser the test should use at runtime, instead of hardcoding the browser name in your scripts.

    🔸 Scenario:
        Currently, the browser is hardcoded in the script. Instead, let’s define it as a global variable,
        so all test cases refer to this single variable (${browser_name}).
        This way, we can override its value from the command line when needed.

    🔹 Step-by-Step:

        Step 1: Set a default browser in your generic/shared variable file
            - For example, set:
                *** Variables ***
                ${browser_name}    Chrome
            - Don’t pass browser_name from the command line unless you want to override it.
            - Update your test cases to use ${browser_name} wherever browser initialization is done.

        Step 2: Override the browser from the command line at runtime
            If you want to run the tests on a different browser (say Firefox), use:
                robot --variable browser_name:Firefox testDemo7.robot
            This will override the default Chrome value and use Firefox instead.

    ℹ️ Notes:
        - The --variable syntax is:
            --variable variable_name:value
        - The variable_name part should match the variable name without the ${}.
          For example, if your script uses ${browser_name}, then you must pass:
            --variable browser_name:SomeValue
        - The variable should be Global variable i.e it can be in any file but it must be under ***variables***


    6. We can pass multiple flags,variables in command line
        ex:
            robot --variable browser_name:Firefox --include SMOKE testDemo7.robot
            robot --variable browser_name:Firefox --include SMOKE -t "Valid Login Test" testDemo7.robot

INTERVIEW QUESTIONS:
--------------------

    1. How do you set the command line arguments?
    2. How to return the value from keyword?
        Ans: ${result} =     Get Text    ${Error_Message_Login}
    3. How do you share the variables from one keyword to another keyword?
        Ans:
        *** Keywords ***
        Grab the Email id present in the child window                       ---> Keyword 1
            ${mail_id}=    Get From List    ${2nd_split_list}    0          ---> Variable
            Log    ${mail_id}
            Set Global Variable        ${mail_id}                           ---> Making variable global

        Switch back to the Parent window and enter the Email Id             ---> Keyword 2
            Switch Window    MAIN
            Title Should Be    LoginPage Practise | Rahul Shetty Academy
            Input Text        id:username    ${mail_id}    Clear Element Text
            log     ${mail_id}

        Here ${mail_id} is a variable from 1st keyword but i want to use it in another keyword.
        for that, we have to made that variable as global variable by using "Global Variable"
        That make the variable to go into global scope and we access in another keyword

    4. How do yu get your robot framework selenium instance to your custom library python file?
        Ans: ---> BuiltIn().get_library_instance("Seleniumlibrary")
            Ex:
            from robot.libraries.BuiltIn import BuiltIn

            @library
            class Shop:
                def __init__(self):
                    self.selLib = BuiltIn().get_library_instance("Seleniumlibrary")

    5. How do you create custom python keywords ? and deploy that?
    Ans: Section6 Notes
        (we need to explain the process that we followed in customLibraries --->Shop.py file)

    6. Questions on Data Driven Testing?
    7. Parameterization of your test cases?
    8. How do you set the POM?
    9. All related questions present in our existing examples?
    10. How do you set the paths?
    11. How to test parallel?
        Ans: tell about pabot library and terminal commands.
    12. For more interview questions assistance ---> reach out to
            Framework Interview questions ---> mentor@rahulshettyacademy.com
